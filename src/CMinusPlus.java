/* CMinusPlus.java */
/* Generated By:JavaCC: Do not edit this line. CMinusPlus.java */
import java.io.*;

public class CMinusPlus implements CMinusPlusConstants {
        public static void main(String[] args) throws IOException {
                String LineaEntera = " ";
                FileReader f = new FileReader("ejemplo.txt");
                BufferedReader bf = new BufferedReader(f);
                String Linea = bf.readLine();
                while(Linea != null) {
                        LineaEntera += Linea;
                        Linea = bf.readLine();
                }
                f.close();
                try{
                        new CMinusPlus(new java.io.StringReader(LineaEntera)).S();
                        System.out.println("La sintaxis es CORRECTA");
                }catch(Throwable e){
                        System.out.println("ERROR en la sintaxis: "+ e.getMessage());
                }
        }

/* 0 */  static final public  void S() throws ParseException {
    program();
    jj_consume_token(0);
}

/* 1 */  static final public  void program() throws ParseException {
    declaration_list();
}

/* 2 */  static final public  void declaration_list() throws ParseException {
    label_1:
    while (true) {
      declaration();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case VOID:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
}

/* 3 */  static final public  void declaration() throws ParseException {
    if (jj_2_1(2147483647)) {
      var_declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case VOID:{
        fun_declaration();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/* 4 */  static final public  void var_declaration() throws ParseException {
    type_specifier();
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 22:{
      jj_consume_token(22);
      jj_consume_token(NUM);
      jj_consume_token(23);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(24);
}

/* 5 */  static final public  void type_specifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* 6 */  static final public  void fun_declaration() throws ParseException {
    type_specifier();
    jj_consume_token(ID);
    jj_consume_token(25);
    params();
    jj_consume_token(26);
    compound_stmt();
}

/* 7 */  static final public  void params() throws ParseException {
    if (jj_2_2(2147483647)) {
      param_list();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/* 8 */  static final public  void param_list() throws ParseException {
    param();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 27:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(27);
      param();
    }
}

/* 9 */  static final public  void param() throws ParseException {
    type_specifier();
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 28:{
      jj_consume_token(28);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
}

/* 10 */  static final public  void compound_stmt() throws ParseException {
    jj_consume_token(29);
    local_declarations();
    statement_list();
    jj_consume_token(30);
}

/* 11 */  static final public  void local_declarations() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case VOID:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      var_declaration();
    }
}

/* 12 */  static final public  void statement_list() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case RETURN:
      case WHILE:
      case ID:
      case NUM:
      case 25:
      case 29:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      statement();
    }
}

/* 13 */  static final public  void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:
    case NUM:
    case 25:{
      expression_stmt();
      break;
      }
    case 29:{
      compound_stmt();
      break;
      }
    case IF:{
      selection_stmt();
      break;
      }
    case WHILE:{
      iteration_stmt();
      break;
      }
    case RETURN:{
      return_stmt();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* 14 */  static final public  void expression_stmt() throws ParseException {
    expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 24:{
      jj_consume_token(24);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
}

/* 15 */  static final public  void selection_stmt() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(25);
    expression();
    jj_consume_token(26);
    statement();
    if (jj_2_3(2)) {
      jj_consume_token(ELSE);
      statement();
    } else {
      ;
    }
}

/* 16 */  static final public  void iteration_stmt() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(25);
    expression();
    jj_consume_token(26);
    statement();
}

/* 17 */  static final public  void return_stmt() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:
    case NUM:
    case 25:{
      expression();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(24);
}

/* 18 */  static final public  void expression() throws ParseException {
    if (jj_2_4(2147483647)) {
      var();
      jj_consume_token(31);
      expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:
      case NUM:
      case 25:{
        simple_expression();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/* 19 */  static final public  void var() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 22:{
      jj_consume_token(22);
      expression();
      jj_consume_token(23);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
}

/* 20 */  static final public  void simple_expression() throws ParseException {
    additive_expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RELOP:{
      relop();
      additive_expression();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
}

/* 21 */  static final public  void relop() throws ParseException {
    jj_consume_token(RELOP);
}

/* 22 */  static final public  void additive_expression() throws ParseException {
    term();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADDOP:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      addop();
      term();
    }
}

/* 23 */  static final public  void addop() throws ParseException {
    jj_consume_token(ADDOP);
}

/* 24 */  static final public  void term() throws ParseException {
    factor();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULOP:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      mulop();
      factor();
    }
}

/* 25 */  static final public  void mulop() throws ParseException {
    jj_consume_token(MULOP);
}

/* 26 */  static final public  void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 25:{
      jj_consume_token(25);
      expression();
      jj_consume_token(26);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      if (jj_2_5(2147483647)) {
        call();
      } else if (jj_2_6(2147483647)) {
        var();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUM:{
          jj_consume_token(NUM);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

/* 27 */  static final public  void call() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(25);
    args();
    jj_consume_token(26);
}

/* 28 */  static final public  void args() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:
    case NUM:
    case 25:{
      arg_list();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
}

/* 29 */  static final public  void arg_list() throws ParseException {
    expression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 27:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      jj_consume_token(27);
      expression();
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_param_list_83_3_9()) return true;
    return false;
  }

  static private boolean jj_3R_compound_stmt_89_3_25()
 {
    if (jj_scan_token(29)) return true;
    return false;
  }

  static private boolean jj_3R_param_86_3_15()
 {
    if (jj_3R_type_specifier_74_3_13()) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_param_list_83_3_9()
 {
    if (jj_3R_param_86_3_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_param_list_83_13_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_call_145_3_12()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_var_declaration_71_3_8()) return true;
    return false;
  }

  static private boolean jj_3R_type_specifier_74_3_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    return false;
  }

  static private boolean jj_3R_var_declaration_71_3_8()
 {
    if (jj_3R_type_specifier_74_3_13()) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_var_declaration_71_26_14()) jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    return false;
  }

  static private boolean jj_3R_arg_list_151_18_35()
 {
    if (jj_scan_token(27)) return true;
    if (jj_3R_expression_118_3_29()) return true;
    return false;
  }

  static private boolean jj_3R_factor_142_26_43()
 {
    if (jj_3R_call_145_3_12()) return true;
    return false;
  }

  static private boolean jj_3R_expression_118_49_32()
 {
    if (jj_3R_simple_expression_124_3_34()) return true;
    return false;
  }

  static private boolean jj_3R_arg_list_151_3_33()
 {
    if (jj_3R_expression_118_3_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_arg_list_151_18_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_args_148_5_30()
 {
    if (jj_3R_arg_list_151_3_33()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_statement_99_5_10()) return true;
    return false;
  }

  static private boolean jj_3R_args_148_3_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_args_148_5_30()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_term_136_14_41()
 {
    if (jj_scan_token(21)) return true;
    if (jj_3R_factor_142_3_40()) return true;
    return false;
  }

  static private boolean jj_3R_simple_expression_124_26_37()
 {
    if (jj_scan_token(19)) return true;
    if (jj_3R_additive_expression_130_3_36()) return true;
    return false;
  }

  static private boolean jj_3R_call_145_3_12()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(25)) return true;
    if (jj_3R_args_148_3_23()) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  static private boolean jj_3R_factor_142_3_42()
 {
    if (jj_scan_token(25)) return true;
    if (jj_3R_expression_118_3_29()) return true;
    if (jj_scan_token(26)) return true;
    return false;
  }

  static private boolean jj_3R_factor_142_3_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_factor_142_3_42()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_142_26_43()) {
    jj_scanpos = xsp;
    if (jj_3R_factor_142_53_44()) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_additive_expression_130_12_39()
 {
    if (jj_scan_token(20)) return true;
    if (jj_3R_term_136_3_38()) return true;
    return false;
  }

  static private boolean jj_3R_term_136_3_38()
 {
    if (jj_3R_factor_142_3_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_term_136_14_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_additive_expression_130_3_36()
 {
    if (jj_3R_term_136_3_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_additive_expression_130_12_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_var_121_3_11()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_var_121_9_22()
 {
    if (jj_scan_token(22)) return true;
    if (jj_3R_expression_118_3_29()) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  static private boolean jj_3R_simple_expression_124_3_34()
 {
    if (jj_3R_additive_expression_130_3_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_simple_expression_124_26_37()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_var_121_3_11()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_var_121_9_22()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_expression_118_3_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expression_118_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_expression_118_49_32()) return true;
    }
    return false;
  }

  static private boolean jj_3R_expression_118_3_31()
 {
    if (jj_3R_var_121_3_11()) return true;
    if (jj_scan_token(31)) return true;
    if (jj_3R_expression_118_3_29()) return true;
    return false;
  }

  static private boolean jj_3R_return_stmt_115_3_28()
 {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_iteration_stmt_112_3_27()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_selection_stmt_110_3_26()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_expression_stmt_107_3_24()
 {
    if (jj_3R_expression_118_3_29()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_var_121_3_11()) return true;
    return false;
  }

  static private boolean jj_3R_statement_103_5_21()
 {
    if (jj_3R_return_stmt_115_3_28()) return true;
    return false;
  }

  static private boolean jj_3R_statement_102_5_20()
 {
    if (jj_3R_iteration_stmt_112_3_27()) return true;
    return false;
  }

  static private boolean jj_3R_statement_101_5_19()
 {
    if (jj_3R_selection_stmt_110_3_26()) return true;
    return false;
  }

  static private boolean jj_3R_statement_100_5_18()
 {
    if (jj_3R_compound_stmt_89_3_25()) return true;
    return false;
  }

  static private boolean jj_3R_statement_99_5_17()
 {
    if (jj_3R_expression_stmt_107_3_24()) return true;
    return false;
  }

  static private boolean jj_3R_statement_99_5_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_statement_99_5_17()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_100_5_18()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_101_5_19()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_102_5_20()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_103_5_21()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_factor_142_53_44()
 {
    if (jj_3R_var_121_3_11()) return true;
    return false;
  }

  static private boolean jj_3R_var_declaration_71_26_14()
 {
    if (jj_scan_token(22)) return true;
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  static private boolean jj_3R_param_list_83_13_16()
 {
    if (jj_scan_token(27)) return true;
    if (jj_3R_param_86_3_15()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CMinusPlusTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x5000,0x5000,0x400000,0x5000,0x4000,0x8000000,0x10000000,0x5000,0x2206a800,0x2206a800,0x1000000,0x2060000,0x2060000,0x400000,0x80000,0x100000,0x200000,0x2000000,0x40000,0x2060000,0x8000000,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CMinusPlus(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CMinusPlus(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CMinusPlusTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CMinusPlus(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CMinusPlusTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CMinusPlusTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CMinusPlus(CMinusPlusTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CMinusPlusTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 21; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[32];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 21; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 32; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 6; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
